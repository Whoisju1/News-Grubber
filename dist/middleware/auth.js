"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.loginRequired = loginRequired;
exports.ensureCorrectUser = ensureCorrectUser;

var _jsonwebtoken = require("jsonwebtoken");

/* eslint-disable import/first */

/* eslint consistent-return: 0 */
require('dotenv').load();

// make sure the user is logged in - Authentication
function loginRequired(req, res, next) {
  try {
    var token = req.headers.authorization.split(' ')[1];
    (0, _jsonwebtoken.verify)(token, process.env.SECRETE_KEY, function (err, decoded) {
      if (decoded) return next();
      return next({
        status: 401,
        message: 'Please log in first'
      });
    });
  } catch (e) {
    return next({
      status: 401,
      message: 'Please log in first'
    });
  }
} // make sure you have the correct user - Authorization


function ensureCorrectUser(req, res, next) {
  try {
    var token = req.headers.authorization.split(' ')[1];
    var SECRETE_KEY = process.env.SECRETE_KEY;
    (0, _jsonwebtoken.verify)(token, SECRETE_KEY, function (err, decoded) {
      if (decoded && decoded.id === req.params.id) return next();
      return next({
        status: 401,
        message: 'Unauthorized'
      });
    });
  } catch (e) {
    return next({
      status: 401,
      message: 'Unauthorized'
    });
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9taWRkbGV3YXJlL2F1dGguanMiXSwibmFtZXMiOlsicmVxdWlyZSIsImxvYWQiLCJsb2dpblJlcXVpcmVkIiwicmVxIiwicmVzIiwibmV4dCIsInRva2VuIiwiaGVhZGVycyIsImF1dGhvcml6YXRpb24iLCJzcGxpdCIsInByb2Nlc3MiLCJlbnYiLCJTRUNSRVRFX0tFWSIsImVyciIsImRlY29kZWQiLCJzdGF0dXMiLCJtZXNzYWdlIiwiZSIsImVuc3VyZUNvcnJlY3RVc2VyIiwiaWQiLCJwYXJhbXMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBSUE7O0FBSkE7O0FBQ0E7QUFDQUEsT0FBTyxDQUFDLFFBQUQsQ0FBUCxDQUFrQkMsSUFBbEI7O0FBSUE7QUFDTyxTQUFTQyxhQUFULENBQXVCQyxHQUF2QixFQUE0QkMsR0FBNUIsRUFBaUNDLElBQWpDLEVBQXVDO0FBQzVDLE1BQUk7QUFDRixRQUFNQyxLQUFLLEdBQUdILEdBQUcsQ0FBQ0ksT0FBSixDQUFZQyxhQUFaLENBQTBCQyxLQUExQixDQUFnQyxHQUFoQyxFQUFxQyxDQUFyQyxDQUFkO0FBQ0EsOEJBQU9ILEtBQVAsRUFBY0ksT0FBTyxDQUFDQyxHQUFSLENBQVlDLFdBQTFCLEVBQXVDLFVBQUNDLEdBQUQsRUFBTUMsT0FBTixFQUFrQjtBQUN2RCxVQUFJQSxPQUFKLEVBQWEsT0FBT1QsSUFBSSxFQUFYO0FBQ2IsYUFBT0EsSUFBSSxDQUFDO0FBQ1ZVLFFBQUFBLE1BQU0sRUFBRSxHQURFO0FBRVZDLFFBQUFBLE9BQU8sRUFBRTtBQUZDLE9BQUQsQ0FBWDtBQUlELEtBTkQ7QUFPRCxHQVRELENBU0UsT0FBT0MsQ0FBUCxFQUFVO0FBQ1YsV0FBT1osSUFBSSxDQUFDO0FBQUVVLE1BQUFBLE1BQU0sRUFBRSxHQUFWO0FBQWVDLE1BQUFBLE9BQU8sRUFBRTtBQUF4QixLQUFELENBQVg7QUFDRDtBQUNGLEMsQ0FFRDs7O0FBQ08sU0FBU0UsaUJBQVQsQ0FBMkJmLEdBQTNCLEVBQWdDQyxHQUFoQyxFQUFxQ0MsSUFBckMsRUFBMkM7QUFDaEQsTUFBSTtBQUNGLFFBQU1DLEtBQUssR0FBR0gsR0FBRyxDQUFDSSxPQUFKLENBQVlDLGFBQVosQ0FBMEJDLEtBQTFCLENBQWdDLEdBQWhDLEVBQXFDLENBQXJDLENBQWQ7QUFERSxRQUVNRyxXQUZOLEdBRXNCRixPQUFPLENBQUNDLEdBRjlCLENBRU1DLFdBRk47QUFHRiw4QkFBT04sS0FBUCxFQUFjTSxXQUFkLEVBQTJCLFVBQUNDLEdBQUQsRUFBTUMsT0FBTixFQUFrQjtBQUMzQyxVQUFJQSxPQUFPLElBQUlBLE9BQU8sQ0FBQ0ssRUFBUixLQUFlaEIsR0FBRyxDQUFDaUIsTUFBSixDQUFXRCxFQUF6QyxFQUE2QyxPQUFPZCxJQUFJLEVBQVg7QUFDN0MsYUFBT0EsSUFBSSxDQUFDO0FBQ1ZVLFFBQUFBLE1BQU0sRUFBRSxHQURFO0FBRVZDLFFBQUFBLE9BQU8sRUFBRTtBQUZDLE9BQUQsQ0FBWDtBQUlELEtBTkQ7QUFPRCxHQVZELENBVUUsT0FBT0MsQ0FBUCxFQUFVO0FBQ1YsV0FBT1osSUFBSSxDQUFDO0FBQUVVLE1BQUFBLE1BQU0sRUFBRSxHQUFWO0FBQWVDLE1BQUFBLE9BQU8sRUFBRTtBQUF4QixLQUFELENBQVg7QUFDRDtBQUNGIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgaW1wb3J0L2ZpcnN0ICovXHJcbi8qIGVzbGludCBjb25zaXN0ZW50LXJldHVybjogMCAqL1xyXG5yZXF1aXJlKCdkb3RlbnYnKS5sb2FkKCk7XHJcblxyXG5pbXBvcnQgeyB2ZXJpZnkgfSBmcm9tICdqc29ud2VidG9rZW4nO1xyXG5cclxuLy8gbWFrZSBzdXJlIHRoZSB1c2VyIGlzIGxvZ2dlZCBpbiAtIEF1dGhlbnRpY2F0aW9uXHJcbmV4cG9ydCBmdW5jdGlvbiBsb2dpblJlcXVpcmVkKHJlcSwgcmVzLCBuZXh0KSB7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IHRva2VuID0gcmVxLmhlYWRlcnMuYXV0aG9yaXphdGlvbi5zcGxpdCgnICcpWzFdO1xyXG4gICAgdmVyaWZ5KHRva2VuLCBwcm9jZXNzLmVudi5TRUNSRVRFX0tFWSwgKGVyciwgZGVjb2RlZCkgPT4ge1xyXG4gICAgICBpZiAoZGVjb2RlZCkgcmV0dXJuIG5leHQoKTtcclxuICAgICAgcmV0dXJuIG5leHQoe1xyXG4gICAgICAgIHN0YXR1czogNDAxLFxyXG4gICAgICAgIG1lc3NhZ2U6ICdQbGVhc2UgbG9nIGluIGZpcnN0J1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH0gY2F0Y2ggKGUpIHtcclxuICAgIHJldHVybiBuZXh0KHsgc3RhdHVzOiA0MDEsIG1lc3NhZ2U6ICdQbGVhc2UgbG9nIGluIGZpcnN0JyB9KTtcclxuICB9XHJcbn1cclxuXHJcbi8vIG1ha2Ugc3VyZSB5b3UgaGF2ZSB0aGUgY29ycmVjdCB1c2VyIC0gQXV0aG9yaXphdGlvblxyXG5leHBvcnQgZnVuY3Rpb24gZW5zdXJlQ29ycmVjdFVzZXIocmVxLCByZXMsIG5leHQpIHtcclxuICB0cnkge1xyXG4gICAgY29uc3QgdG9rZW4gPSByZXEuaGVhZGVycy5hdXRob3JpemF0aW9uLnNwbGl0KCcgJylbMV07XHJcbiAgICBjb25zdCB7IFNFQ1JFVEVfS0VZIH0gPSBwcm9jZXNzLmVudjtcclxuICAgIHZlcmlmeSh0b2tlbiwgU0VDUkVURV9LRVksIChlcnIsIGRlY29kZWQpID0+IHtcclxuICAgICAgaWYgKGRlY29kZWQgJiYgZGVjb2RlZC5pZCA9PT0gcmVxLnBhcmFtcy5pZCkgcmV0dXJuIG5leHQoKTtcclxuICAgICAgcmV0dXJuIG5leHQoe1xyXG4gICAgICAgIHN0YXR1czogNDAxLFxyXG4gICAgICAgIG1lc3NhZ2U6ICdVbmF1dGhvcml6ZWQnXHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfSBjYXRjaCAoZSkge1xyXG4gICAgcmV0dXJuIG5leHQoeyBzdGF0dXM6IDQwMSwgbWVzc2FnZTogJ1VuYXV0aG9yaXplZCcgfSk7XHJcbiAgfVxyXG59XHJcbiJdfQ==